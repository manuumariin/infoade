/*! \mainpage Documentación de Práctica: Rutas aéreas.

> **Documentación realizada por: Manuel Marín Rodríguez y Raúl Martínez Bustos.**

@image html portada_avion.png

# Información general sobre las clases
\n
##Imagen
Esta clase se implementará a partir de la clase Image de nuestra primera práctica TDA Imagen, pero con algún que otro método nuevo.
Será fundamental para realizar la práctica, y esta se servirá de pixeles para construir las imágenes, los cuales tendran tres valores
de **rgb** (red, green & blue) y un valor de **transparencia** para la máscara de las imágenes.

> **Foto PPM (a color)** @image html rgb_struct.png

Como se ejemplifica aquí abajo, en esta práctica se usarán imágenes de banderas, mapas, aviones, máscaras de aviones(con valor *OPACO* o *BLENDING*), (etc)..

> **Bandera España** @image html laexcelentisima.png
\n
> **Mapa sobre el que nos moveremos** @image html mapa.png
\n
> **Avion 1** @image html avion1.png
\n
> **Máscara de avión 1** @image html mascara_avion1.png

Trabajaremos por lo tanto con imágenes **ppm** - Portable Pixel Map (a color, donde los colores salen de la mezcla de los colores rojo
verde y azul) e imágenes **pgm** - Portable Gray Map (blanco y negro, que usan una escala de grises para ser representadas).
Como se puede apreciar, será esencial haber realizado y comprendido el TDA imagen para poder realizar también esta práctica.

> **Foto PGM (escala de grises/ blanco y negro)** @image html mickey.png



\n
##Punto

Esta clase será esencial para la implementación de otras, ya que será un punto que nos servirá para hacer referencia a ubicaciones
 geográficas en nuestro mapa. De esta manera, nuestra clase punto contendrá una latitud, una longitud, y una descripción.

 La latitud y longitud nos servirán para saber a que lugar exactamente hace referencia el objeto punto que estemos utilizando. Sin
 embargo, no podemos usar la latitud y longitud directamente sin filtro y transladarlas tal cual a nuestro mapa, usaremos la siguiente
 fórmula (fundamentalmente en ruta_aerea.cpp):

 > **Formula para traslación de par puntos- par pixeles mapa**@image html formula_pixeles.png

 Cabe destacar también que por lo tanto, el punto seguirá una estructura de   -->  "(" || latitud || , || longitud || descripcion || ")".
 De la estructura mencionada arriba, puede llegar a dar problemas graves en los main el dato miembro del private "descripcion" de la
 clase Punto, por lo que se deberá manejar con cuidado. Finalmente, un ejemplo de punto en los archivos txt que vienen inicialmente con
 la práctica serían:

 > **Ejemplo estructura clase punto**@image html point_struct.png

 \n

##País

Esta clase será crucial para poder procesar cada país del archivo "paises.txt", y cargar cada una de las lineas de información de países en nuestros
objetos países diferentes. Por lo tanto, cada país contendrá un punto, un string con su propio nombre (que en el fondo sirve como ID después
para poder encontrar el país) y un string bandera, que nos permitirá cargar la bandera de nuestro país desde el directorio de banderas que se
nos proporciona ya en los archivos dados.

@image html final_banderas.png

Como se puede apreciar, la variedad presente de banderas es notable, pues hablamos de un programa que trata de representar rutas de vuelo por
todo el mundo.

\n
##Paises

Esta clase, como se puede deducir, está formada por una agrupación de objetos de la clase país. Sin embargo, sería un error no mencionar
que nuestra clase está implementada con una set<Pais> paises, es decir, un set de pais, al que podemos acceder como nuestro objeto "Paises".

    private:
        	set<Pais> datos; ///< conjunto de países

Como consecuencia, esta clase será fundamental para poder leer el fichero entero de "paises.txt", pero no de uno en uno, sino como conjunto.

    # Latitud Longitud Pais Bandera
    34.520418555522845 69.20082090000005 Afganistan afganistan.ppm
    41.332136072796175 19.812877200000003 Albania albania.ppm
    52.50786264022465 13.426141949999987 Alemania alemania.ppm
    -11.294616098942507 17.877003150000064 Angola angola.ppm
    24.725939314861463 46.822528799999986 ArabiaSaudita arabiasaudi.ppm
    28.415101049232497 1.6666662999999744 Argelia argelia.ppm
    -34.61590069251671 -58.433298449999995 Argentina argentina.ppm
    40.0817343141965 45.04071690000001 Armenia armenia.ppm
    -27.787075486256633 133.28132295 Australia australia.ppm
    47.71329162782909 13.34573480000006 Austria austria.ppm
    40.17498736058696 47.56637439999997 Azerbaiyan azerbaiyan.ppm

Con nuestros operadores de flujo, conseguiremos que el archivo mostrado aquí arriba del que, como habíamos dicho, podíamos sacar un País por
línea,("Paises.txt") quede convertido como conjunto en un objeto Paises. De esta manera, será muy importante no tener fallos ni confusiones
con los iteradores const_iterator y los iterator.


##Ruta
En esta clase es la segunda vez se que manejan iteradores tanto variables como constantes. Esta tiene como datos miembros privados principalmente un
string code(el cual es el código o ID de la ruta) y una list<Punto> o lista de puntos, la cual son la enumeración de puntos que forman nuestra ruta.
Si se necesitase, podría implementarse un número entero auxiliar para tener la cantidad de puntos, pero no sería del todo necesario, porque lo podríamos
saber llamando a la función "size()"" de nuestra lista "list<Punto> puntos", obteniendo así el tamaño de esta sin necesidad de "int nelementos":

    private:
        string code; ///< código identificador de la ruta
        list<Punto> puntos; ///< lista de puntos geográficos de la ruta

Para cada ruta, volveríamos a implementar los operadores de inserción y extracción de flujo, pudiendo asi leer una ruta, que tendría un formato como el
que se expone a continuación:

    R1 5 (34.520418555522845,69.20082090000005) (52.50786264022465,13.426141949999987) (7.406652727545182,12.344585699999925) (-0.18659558628491132,-78.4305382) (40.40051528912146,-3.5916460749999635)

##Almacen de rutas
Esta sería la clase que realmente engloba a todo el resto. Esta trata de conseguir hacer un almacen de rutas para resolver nuestro problema inicial; la
representación gráfica de una ruta aérea. La estructura que tendría esta clase en el private no es tan rígida como en los casos anteriores, se trata de
una clase más flexible en la que podemos usar varias estructuras de datos. Lo que si está claro es que hay que usar si o si una estructura map<string,Ruta>
u otra combinación de estructuras(pero que sean efectivas y tengan la misma funcionalidad que la mencionada).

De esta manera, podríamos poder insertar los operadores << y >> para poder conseguir leer un almacen de rutas entero sin problema, y resolver la tarea más laboriosa
de la práctica, el archivo ruta_aerea.cpp. Muy importante destacar el uso de iteradores const_iterator e iterator (que deberán volver a estar implementados por nosotros mismos).

> **Ejemplo de formato fichero "almacen_rutas.txt" a procesar** @image html almacen_rutas.png

Como se ve arriba, ese formato sería un almacen de rutas, del cual el usuario debería poder escoger una ruta en concreto mediante su code (código,
mencionado anteriormente), y gracias al principio de modularidad y ocultación de la información, el resto de funciones y clases implementadas ya
dentro de Almacen_Rutas, deberían ya poder hacer que nuestro código cumpla la función que busca la práctica sin ningún problema.

#Explicación,fundamentación y desarrollo de tareas

Una vez ya hemos explicado la inplementación y desarrollo de nuestro código, damos pie a la exposición de la solución de tareas propuestas en el
enunciado de esta práctica final.
## TAREA 1

@image html tarea_1.png

Como se puede apreciar en la imagen adjunta arriba, en este main nos tendremos que ocupar de comprobar que nuestra función void rotar() funcione,
este main servirá para guardar el resultado de esta. En caso de que funcione nuestra función hará que se rote la imagen los grados que se hayan
pasado como argumento, y en caso de que no se quedará tal y como estaba.

@image html ex_rotacion.png

Los parámetros que hemos usado para probarla son los configurados arriba en el clion, pero en el enunciado de la práctica se recomiendan los siguientes argumentos:

@image html parametros1.png

El código que ha sido utilizado para hacer tanto este main como la función "void rotar()", se encuentran dentro del proyecto en pruebarotacion.cpp (veanse ahí, pues
el texto es demasiado largo como para caber aquí).


Una vez implementado el código anteriormente mencionado, probamos a ejecutar nuestro pruebarotacion con un giro de 90 grados (parametro = 90), obteniendo el siguiente resultado:


> **Imagen de avión sin rotar** @image html rotado90_final.png

> **Imagen de avión rotado 90 grados** @image html avion_rotado.png

Por lo tanto,al ver que el avión ha girado exactamente 90 grados, es apreciable que nuestro algoritmo funciona, y la primera tarea ya está resuelta(pruébese con
todos los grados y amplitudes que se quiera si es necesario).

## TAREA 2

@image html tarea2.png

En este caso, como se divisa arriba, esta tarea busca que se cree una función para poder pegar una imagen sobre otra (la cual usaremos en ruta_aerea.cpp, para
pegar tanto banderas como aviones sobre nuestro mapa del globo terráqueo). Este main por lo tanto es solo una comprobación de que el código que hemos implementado
realmente funciona.
Para entender como se haría, vamos a exponer aquí abajo nuestro código del main de pruebapegado.cpp, aunque se podría ver de una mejor manera dentro del mismo
proyecto:

###main de pruebapegado.cpp

        #include <iostream>
        #include <cstdlib>
        #include <cmath>

        #include "imagen.h"

        using namespace std;

        int main(int argc, char *argv[]){
          if (argc != 8) {
              cerr << "Uso: pruebapegado <img_fondo> <img_pegar> <mascara> <img_salida> <fila> <columna> <opacidad>" << endl;
              exit(1);
          }
          else {
              Imagen I, Ip;
              I.Leer(argv[1]);
              Ip.Leer(argv[2], argv[3]);
              int i, j;
              i = atoi(argv[5]);
              j = atoi(argv[6]);

              Tipo_Pegado tp = OPACO; // Variable de tipo Tipo_Pegado que es un enumerado con los valores OPACO y	BLENDING
              int au = atoi(argv[7]);
              if (au != 0)
                  tp = BLENDING;

              I.PegarImagen(i, j, Ip, tp);
              I.Escribir(argv[4]);
          }
          return 0;
        }

 Una vez visto como es el algoritmo, tras entenderlo e implementarlo, procedemos a probarlo. En nuestro caso, nosotros tenemos
 los parámetros por defecto configurados para realizar esta prueba, pero según el enunciado, los parámetros a introducir para
 pruebapegado serían:

 @image html parametros2.png

 Finalmente, nuestro resultado dependerá de si metemos un 0 o un 1, si metemos un 1, se hará resultado blending de la figura,
 pero si metemos un 0, se pegará la figura totalmente opaca. Probemos pues con cada uno de las dos opciones:

 >**Opción parámetro=0**
 @image html ex_opaco0

 >**Opción parametro=1**
 @image html ex_blending1


En conclusión, viendo que los resultados son los esperados con los diferentes parámetros, podemos decir que esta tarea queda
resuelta, y que nuestro pruebapegado cumple lo que se pide.

## TAREA 3
Por último, queda la tarea más laboriosa y complicada de todas, la representación de una ruta aérea objetivo en el mapa del mundo.
Son múltiples las rutas que se nos brinda en el archivo para poder comprobar si esta tarea también la hemos implementado correctamente.

Obviamos no poner el código en esta sección porque es el main más largo de los tres creados, por lo tanto no cabe aquí. Si se quiere
revisar o se tiene alguna duda, se aconseja mirar código del proyecto directamente.

Para poder comprender el main tenemos que basarnos en la teoría de translación de par (latitud,longitud) a par de pixeles, siguiendo la
fórmula expuesta nuevamente aquí abajo. Debemos procurar orientar nuestro algoritmo con un sentido lógico que busque cumplir la lógica
de la foto aquí adjuntada sobre conceptos de latitud y longitud en el planeta Tierra.

>**Conceptos a asimilar sobre latitud y longitud** @image html conceptos_geo.png


> **Fórmula anteriormente mencionada** @image html formula_pixeles.png


Una vez se asimilen estos conceptos, y consigamos el nivel de abstracción suficiente, conseguiremos implementar el código. Para probar este
código nosotros nuevamente hemos puesto los parámetros por defecto, pero según la práctica serían los siguientes:


>**Parámetros a introducir** @image parametros3.png html

Por lo tanto, veamos nuestro "almacen_rutas.txt":

        #Rutas
        R1 5 (34.520418555522845,69.20082090000005) (52.50786264022465,13.426141949999987) (7.406652727545182,12.344585699999925) (-0.18659558628491132,-78.4305382) (40.40051528912146,-3.5916460749999635)
        R2 8 (58.695433501291085,-96) (35.08690549340541,-103.72339606166992) (-12.055345316962327,-77.04518530000001) (40.40051528912146,-3.5916460749999635) (37.943768420529985,104.13611175000005) (-27.787075486256633,133.28132295) (35.673473752079516,139.71038800000008) (62.88647107195116,61.551173617626986)
        R3 5 (17.246400332673307,-19.670602940234403) (4.283635422564345,-74.22403995000002) (51.528868434293244,-0.10159864999991441) (62.88647107195116,61.551173617626986) (37.943768420529985,104.13611175000005)
        R4 11 (14.422538164676899,-87.63432239999997) (48.85887766623369,2.3470598999999766) (24.725939314861463,46.822528799999986) (58.695433501291085,-96) (35.08690549340541,-103.72339606166992) (-12.055345316962327,-77.04518530000001)	(40.40051528912146,-3.5916460749999635) (37.943768420529985,104.13611175000005) (-27.787075486256633,133.28132295) (35.673473752079516,139.71038800000008) (62.88647107195116,61.551173617626986)
        R5 5 (52.76081718996433,8.747611999999986) (-19.051901092806112,29.15280180000002) (-34.61590069251671,-58.433298449999995) (58.695433501291085,-96) (52.76081718996433,8.747611999999986)

Ahora veamos las posiciones en el globo(según criterio latitud y longitud mencionado) de los países en "paises.txt"

        # Latitud         	Longitud 	      	Pais      	Bandera
        34.520418555522845	69.20082090000005	Afganistan	afganistan.ppm
        41.332136072796175	19.812877200000003	Albania	albania.ppm
        52.50786264022465	13.426141949999987	Alemania	alemania.ppm
        -11.294616098942507	17.877003150000064	Angola	angola.ppm
        24.725939314861463 	46.822528799999986	ArabiaSaudita	arabiasaudi.ppm
        28.415101049232497	1.6666662999999744	Argelia	argelia.ppm
        -34.61590069251671	-58.433298449999995	Argentina	argentina.ppm
        40.0817343141965	45.04071690000001	Armenia	armenia.ppm
        -27.787075486256633	133.28132295	Australia	australia.ppm
        47.71329162782909	13.34573480000006	Austria	austria.ppm
        40.17498736058696	47.56637439999997	Azerbaiyan	azerbaiyan.ppm
        50.51175446185682	4.476532349999957	Belgica	belgica.ppm
        -16.520736280532606	-68.0915129	Bolivia	bolivia.ppm
        43.93206629763536	17.67282150750000014	BosniaHerzegovina	bosniaherzegovina.ppm
        -15.127750465951602	-53.180596700000024	Brasil	brasil.ppm
        42.743183075563316	25.48330390000001	Bulgaria	bulgaria.ppm
        12.254845274309291	-1.5584094000000732	BurkinaFaso	burkina.ppm
        -3.3902102430012944 	29.925582899999995	Burundi	burundi.ppm
        27.53455005213239	90.43585280000002	Butan	butan.ppm
        17.246400332673307	-19.670602940234403	CaboVerde	caboverde.ppm
        11.997076634578972	104.9806145	Camboya	camboya.ppm
        7.406652727545182	12.344585699999925	Camerun	camerun.ppm
        58.695433501291085	-96	Canada	canada.ppm
        25.33013186654572	51.19665770000006	Catar	qatar.ppm
        15.601871688739438 	18.735000499999956	Chad	chad.ppm
        4.283635422564345	-74.22403995000002	Colombia	colombia.ppm
        -33.6705297862472	-70.36337194999999	Chile	chile.ppm
        37.943768420529985	104.13611175000005	China	china.ppm
        35.17152769986567	33.43660380000006	Chipre	chipre.ppm
        39.02918051275547 	125.74211179999998	CoreaNorte	corea_norte.pgm
        35.90947405718781 	127.09640510000008	CoreaSur	corea_sur.pgm
        9.633931465220899	-84.25418434999995	CostaRica	costarica.ppm
        -0.18659558628491132	-78.4305382	Ecuador	ecuador.ppm
        13.691481458911323	-89.21469394999997	ElSalvador	elsalvador.ppm
        35.08690549340541	-103.72339606166992	EstadosUnidos	estadosunidos.ppm
        40.40051528912146	-3.5916460749999635	España	españa.ppm
        48.85887766623369	2.3470598999999766	Francia	francia.ppm
        15.788111861178445	-90.22872565	Guatemala	guatemala.ppm
        14.422538164676899	-87.63432239999997	Honduras	honduras.ppm
        51.528868434293244	-0.10159864999991441	Inglaterra	inglaterra.ppm
        31.79635921136502	35.17535900000007	Israel	israel.ppm
        41.91022566604198	12.535997900000098	Italia	italia.ppm
        35.673473752079516	139.71038800000008	Japon	japon.ppm
        12.097591519086958	-86.25846060000003	Nicaragua	nicaragua.ppm
        52.76081718996433 	8.747611999999986	Noruega		noruega.ppm
        19.320324854426335	-99.15218449999998	Mexico	mexico.ppm
        8.874174555928159	-79.77636344999996	Panama	panama.ppm
        -12.055345316962327	-77.04518530000001	Peru	peru.ppm
        18.48030093645532 	-69.94692029999999	RepublicaDominicana	republicadominicana.ppm
        62.88647107195116	61.551173617626986	Rusia			rusia.ppm
        10.468400048880145	-66.89036584999997	Venezuela	venezuela.ppm
        -19.051901092806112	29.15280180000002	Zimbaue		zimbaue.ppm

Una vez observados ambos archivos, podemos comprobar que todas las rutas disponibles a ejecutar con nuestro programa, funcionan correctamente,
ya que nos dan los países que pertenecen a los puntos establecidos en las rutas. En caso de que no se creyese, hemos puesto aquí
ambas listas, para que se pueda ir mirando y certificando.

Aún así, para terminar con la documentación de nuestro código, vamos a poner el ejemplo de salida de imagen si escogemos la ruta **R2**:

@image html resultado_final.png

Y para comprobar, vemos la salida de nuestro programa por consola:

@image html prueba_correcto.png

Efectivamente, como era de esperar, nuestra salida por la consola consolida nuestra imagen de ruta aérea, por lo tanto, aquí acabaría la realización
y documentación de esta práctica.

*/